{"version":3,"file":"h5p-editor-uuid.js","sources":["node_modules/h5p-utils/dist/h5p-utils.es.js","h5p-editor-uuid.ts"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nvar _a, _b;\nconst H5P = (_a = window.H5P) != null ? _a : {};\nconst H5PEditor = (_b = window.H5PEditor) != null ? _b : {};\nconst getAbsoluteUrlFromRelativePath = (path) => {\n  return H5P.getPath(path, H5PEditor.contentId);\n};\nconst getImageUrl = (imagePath) => {\n  if (!imagePath) {\n    return null;\n  }\n  const imagePathIsAbsolute = imagePath.startsWith(\"http://\") || imagePath.startsWith(\"https://\");\n  const imageUrl = imagePathIsAbsolute ? imagePath : getAbsoluteUrlFromRelativePath(imagePath);\n  return imageUrl;\n};\nconst registerContentType = (name, contentType) => {\n  H5P[name] = contentType;\n};\nconst registerWidget = (h5pName, widgetName, widget) => {\n  H5PEditor[h5pName] = widget;\n  H5PEditor.widgets[widgetName] = widget;\n};\nclass H5PContentType extends H5P.EventDispatcher {\n  constructor(params, contentId, extras) {\n    super();\n    __publicField(this, \"wrapper\");\n    this.params = params;\n    this.contentId = contentId;\n    this.extras = extras;\n    this.wrapper = document.createElement(\"div\");\n  }\n}\nclass H5PWidget extends H5P.EventDispatcher {\n  constructor(parent, field, params, setValue) {\n    super();\n    __publicField(this, \"wrapper\");\n    this.parent = parent;\n    this.field = field;\n    this.params = params;\n    this.setValue = setValue;\n    this.wrapper = document.createElement(\"div\");\n  }\n}\nexport { H5P, H5PContentType, H5PEditor, H5PWidget, getAbsoluteUrlFromRelativePath, getImageUrl, registerContentType, registerWidget };\n","import type { H5PFieldText, IH5PWidget } from \"h5p-types\";\nimport { H5P, H5PWidget, registerWidget } from \"h5p-utils\";\n\nclass UUIDWidget extends H5PWidget<H5PFieldText> implements IH5PWidget {\n  appendTo() {\n    const { field, params, setValue } = this;\n\n    const isTextField = field.type === \"text\";\n    if (!isTextField) {\n      console.warn(\n        `The field \\`${field.name}\\` has the widget \\`uuid\\` set, but is of type \\`${field.type}\\`, not \\`text\\``,\n      );\n    }\n\n    const needsID = !params;\n    if (needsID) {\n      setValue(field, H5P.createUUID());\n    }\n  }\n\n  validate() {\n    return true;\n  }\n\n  remove() {}\n}\n\nregisterWidget(\"UUIDWidget\", \"uuid\", UUIDWidget);\n"],"names":["__defProp","__defNormalProp","obj","key","value","__publicField","_a","_b","H5P","H5PEditor","registerWidget","h5pName","widgetName","widget","H5PContentType","params","contentId","extras","H5PWidget","parent","field","setValue","UUIDWidget"],"mappings":"yBAAA,IAAIA,EAAY,OAAO,eACnBC,EAAkB,CAACC,EAAKC,EAAKC,IAAUD,KAAOD,EAAMF,EAAUE,EAAKC,EAAK,CAAE,WAAY,GAAM,aAAc,GAAM,SAAU,GAAM,MAAAC,CAAO,CAAA,EAAIF,EAAIC,CAAG,EAAIC,EACtJC,EAAgB,CAACH,EAAKC,EAAKC,KAC7BH,EAAgBC,EAAK,OAAOC,GAAQ,SAAWA,EAAM,GAAKA,EAAKC,CAAK,EAC7DA,GAELE,EAAIC,EACR,MAAMC,GAAOF,EAAK,OAAO,MAAQ,KAAOA,EAAK,GACvCG,GAAaF,EAAK,OAAO,YAAc,KAAOA,EAAK,GAenDG,EAAiB,CAACC,EAASC,EAAYC,IAAW,CACtDJ,EAAUE,CAAO,EAAIE,EACrBJ,EAAU,QAAQG,CAAU,EAAIC,CAClC,EACA,MAAMC,UAAuBN,EAAI,eAAgB,CAC/C,YAAYO,EAAQC,EAAWC,EAAQ,CACrC,QACAZ,EAAc,KAAM,SAAS,EAC7B,KAAK,OAASU,EACd,KAAK,UAAYC,EACjB,KAAK,OAASC,EACd,KAAK,QAAU,SAAS,cAAc,KAAK,CAC5C,CACH,CACA,MAAMC,UAAkBV,EAAI,eAAgB,CAC1C,YAAYW,EAAQC,EAAOL,EAAQM,EAAU,CAC3C,QACAhB,EAAc,KAAM,SAAS,EAC7B,KAAK,OAASc,EACd,KAAK,MAAQC,EACb,KAAK,OAASL,EACd,KAAK,SAAWM,EAChB,KAAK,QAAU,SAAS,cAAc,KAAK,CAC5C,CACH,CC5CA,MAAMC,UAAmBJ,CAA8C,CACrE,UAAW,CACT,KAAM,CAAE,MAAAE,EAAO,OAAAL,EAAQ,SAAAM,CAAA,EAAa,KAEhBD,EAAM,OAAS,QAEzB,QAAA,KACN,eAAeA,EAAM,wDAAwDA,EAAM,sBAAA,EAIvE,CAACL,GAENM,EAAAD,EAAOZ,EAAI,WAAY,CAAA,CAEpC,CAEA,UAAW,CACF,MAAA,EACT,CAEA,QAAS,CAAC,CACZ,CAEAE,EAAe,aAAc,OAAQY,CAAU"}